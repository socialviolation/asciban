//go:build exclude

package main

import (
	"fmt"
	"github.com/go-git/go-git/v5"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
	"unicode/utf8"
)

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

const (
	PackageFont = "fontpack"
	PackageMain = "asciiban"
	DefaultFont = "ANSIShadow"
)

func main() {
	_ = os.RemoveAll(PackageFont)
	_ = os.Mkdir(PackageFont, fs.ModePerm)

	dir, err := os.MkdirTemp("", "fontMap")
	if err != nil {
		log.Fatal(err)
	}
	defer func(path string) {
		fmt.Println("removing " + path)
		_ = os.RemoveAll(path)
	}(dir)

	repoUrl := "https://github.com/xero/figlet-fonts"
	_, _ = git.PlainClone(dir, false, &git.CloneOptions{
		URL:      repoUrl,
		Progress: os.Stdout,
	})

	files, err := os.ReadDir(dir)
	if err != nil {
		log.Fatal(err)
	}

	ignoreFonts := []string{"fraktur", "cards", "heartleft", "heartright", "maxiwi", "miniwi"}
	var u []string
	fontMap := make(map[string]string)
	for _, file := range files {
		fName := file.Name()
		if !strings.HasSuffix(fName, "flf") {
			continue
		}

		fmt.Println(fName)
		fName = strings.ReplaceAll(fName, " ", "")
		fName = strings.ReplaceAll(fName, "-", "")
		fName = strings.ReplaceAll(fName, "'", "")
		fName = strings.ReplaceAll(fName, "_", "")
		fName = strings.ReplaceAll(fName, ".flf", "")
		if fName[0] >= '0' && fName[0] <= '9' {
			fName = "F" + fName
		}
		uf := strings.ToLower(fName)
		if contains(ignoreFonts, uf) || contains(u, uf) {
			continue
		}
		u = append(u, uf)

		fName = strings.Title(fName)
		b, _ := os.ReadFile(dir + "/" + file.Name())
		if !utf8.Valid(b) {
			continue
		}
		fc := string(b)
		fc = strings.ReplaceAll(fc, "`", "` + \"`\" + `")
		fontMap[fName] = fc
	}

	fontMapFile, err := os.Create("fonts.go")
	defer func(f *os.File) {
		_ = f.Close()
	}(fontMapFile)

	fontPack := template.Must(template.New("fontpack").Funcs(funcMap).Parse(fontPackTemplate))
	e := fontPack.ExecuteTemplate(fontMapFile, "fontpack", TemplateArgs{
		Timestamp:   time.Now(),
		URL:         repoUrl,
		FontMap:     fontMap,
		Package:     PackageMain,
		DefaultFont: DefaultFont,
	})

	if e != nil {
		fmt.Println("error rendering fonts.go template: ", e)
		os.Exit(1)
	}

	for fontName, v := range fontMap {
		if contains(ignoreFonts, strings.ToLower(fontName)) {
			continue
		}
		fontFile, _ := os.Create(fmt.Sprintf("fontpack/%s.go", strings.ToLower(fontName)))
		fontFileTemplate := template.Must(template.New("ff").Parse(specificFontTemplate))
		e = fontFileTemplate.ExecuteTemplate(fontFile, "ff", FontTemplateArgs{
			Timestamp:    time.Now(),
			URL:          repoUrl,
			FontName:     fontName,
			FontContents: v,
			Package:      PackageFont,
		})

		if e != nil {
			fmt.Println("error rendering template font template for : ", fontName, e)
			os.Exit(1)
		}

		_ = fontFile.Close()
	}

	fmt.Println("Executing go fmt")
	cmd := exec.Command("go", "fmt", "./...")
	if err = cmd.Run(); err != nil {
		log.Fatal(err)
	}
}

type TemplateArgs struct {
	Timestamp   time.Time
	URL         string
	FontMap     map[string]string
	Package     string
	DefaultFont string
}

type FontTemplateArgs struct {
	Timestamp    time.Time
	URL          string
	FontName     string
	FontContents string
	Package      string
}

var funcMap = template.FuncMap{
	"ToLower": strings.ToLower,
}

var fontPackTemplate = `// Package {{ .Package }} Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{ .Timestamp }}
// using data from {{ .URL }}
package {{ .Package }}

import (
	"strings"
	"github.com/socialviolation/{{ .Package }}/fontpack"
)

{{ range $key, $value := .FontMap }}
const Font{{ $key }} = fontpack.{{ $key }}{{end }}

func GetFont(f string) string {
	if val, ok := FontMap[strings.ToLower(f)]; ok {
		return val
	}
	return GetFont("default")
}

var FontMap = map[string]string{
{{ range $key, $value := .FontMap }}	"{{ $key | ToLower}}": Font{{ $key }},
{{end }}
"default": Font{{ .DefaultFont }},
}
`

var specificFontTemplate = `// Package {{ .Package }} Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{ .Timestamp }}
// using data from {{ .URL }}
package {{ .Package }}

const {{ .FontName }} = ` + "`{{ .FontContents }}`" + `
`
