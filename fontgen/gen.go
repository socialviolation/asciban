// The following directive is necessary to make the package coherent:

//go:generate go run gen.go

package main

import (
	"fmt"
	"github.com/go-git/go-git/v5"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
	"unicode/utf8"
)

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

func main() {
	dir, err := os.MkdirTemp("", "fontMap")
	if err != nil {
		log.Fatal(err)
	}
	defer func(path string) {
		fmt.Println("removing " + path)
		_ = os.RemoveAll(path)
	}(dir)

	repoUrl := "https://github.com/xero/figlet-fonts"
	_, _ = git.PlainClone(dir, false, &git.CloneOptions{
		URL:      repoUrl,
		Progress: os.Stdout,
	})

	files, err := os.ReadDir(dir)
	if err != nil {
		log.Fatal(err)
	}

	u := make([]string, 0)
	fontMap := make(map[string]string)
	for _, file := range files {
		fName := file.Name()
		if !strings.HasSuffix(fName, "flf") {
			continue
		}

		fmt.Println(fName)
		fName = strings.ReplaceAll(fName, " ", "")
		fName = strings.ReplaceAll(fName, "-", "")
		fName = strings.ReplaceAll(fName, "'", "")
		fName = strings.ReplaceAll(fName, "_", "")
		fName = strings.ReplaceAll(fName, ".flf", "")
		if fName[0] >= '0' && fName[0] <= '9' {
			fName = "F" + fName
		}
		uf := strings.ToLower(fName)
		if contains(u, uf) {
			continue
		}
		u = append(u, uf)

		fName = strings.Title(fName)
		b, _ := os.ReadFile(dir + "/" + file.Name())
		if !utf8.Valid(b) {
			continue
		}
		fc := string(b)
		fc = strings.ReplaceAll(fc, "`", "` + \"`\" + `")
		fontMap[fName] = fc
	}

	f, err := os.Create("fonts/catalogue.go")
	defer func(f *os.File) {
		_ = f.Close()
	}(f)

	x := template.Must(template.New("xx").Funcs(funcMap).Parse(fontsTemplate))
	e := x.ExecuteTemplate(f, "xx", TemplateArgs{
		Timestamp: time.Now(),
		URL:       repoUrl,
		FontMap:   fontMap,
	})

	if e != nil {
		fmt.Println("error rendering template: ", e)
		os.Exit(1)
	}

}

type TemplateArgs struct {
	Timestamp time.Time
	URL       string
	FontMap   map[string]string
}

var funcMap = template.FuncMap{
	"ToLower": strings.ToLower,
}

var fontsTemplate = `// Package fonts Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{ .Timestamp }}
// using data from {{ .URL }}
package fonts

func Get(f string) string {
	if val, ok := FontMap[f]; ok {
		return val
	}
	return ANSIShadow
}

var FontMap = map[string]string{
{{ range $key, $value := .FontMap }}	"{{ $key | ToLower}}": {{ $key }},
{{end }}}

{{ range $key, $value := .FontMap }}
const {{ $key }} = ` + "`{{ $value }}`" + `
{{ end }}
`

const fontTemplate = "const {{.Name}} = \n`{{.Contents}}`\n"

const allFontsTemplate = "const AllFonts = []string{ {{.FontList}} }"
